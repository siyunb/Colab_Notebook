{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"Graph Neural Networks","provenance":[{"file_id":"1DIQm9rOx2mT1bZETEeVUThxcrP1RKqAn","timestamp":1613725091614}],"collapsed_sections":["i7eJ4xSRr3vi","OJ4OIG8r5EfI","aCgqxSiq6I4B","bANNrQoh8xjF","YUo2Ve8c9wGp"],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"i7eJ4xSRr3vi"},"source":["# Converlutional Neural Network for MNIST Written Dataset"]},{"cell_type":"markdown","metadata":{"id":"42RJ3UWOGLMz"},"source":["## Preparation"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Zs3-GrSqD-Su","cellView":"form","executionInfo":{"status":"ok","timestamp":1614062900521,"user_tz":-540,"elapsed":22257,"user":{"displayName":"王思雨","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgdKvMq1fEVrSVYMjY_lkMRC-UmX30N77KQ_6cd=s64","userId":"09556943149130240731"}},"outputId":"8e5ac48f-42d3-4435-974b-e51170566552"},"source":["#@title Mount Google Drive\r\n","from google.colab import drive\r\n","drive.mount('/content/gdrive', force_remount=True)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/gdrive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"2njqZaJSGfVC"},"source":["## Preliminaries: PyTorch\r\n","We'll first demonstrate some essential features of PyTorch which we'll use throughout. PyTorch is a general machine learning library that allows us to dynamically define computation graphs which we'll use to describe our models and their training processes."]},{"cell_type":"markdown","metadata":{"id":"UUsGIQf1JiAi"},"source":["### Load libraries"]},{"cell_type":"code","metadata":{"id":"YNtPXYKmCVow","cellView":"form"},"source":["#@title Import torch，torchvision and metric\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torchvision\n","import torchvision.transforms as transforms\n","import sklearn.metrics as metrics"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"XdYqRD7aJtm5"},"source":["### Download MNIST data\r\n"]},{"cell_type":"code","metadata":{"id":"3M3Ckk-xEvXm","cellView":"form"},"source":["#@title Download and load in a dataset through the `DataLoader` utility\n","BATCH_SIZE = 32\n","\n","## transformations\n","transform = transforms.Compose([transforms.ToTensor()])\n","\n","## download and load training dataset\n","trainset = torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transform)\n","trainloader = torch.utils.data.DataLoader(trainset, batch_size=BATCH_SIZE, shuffle=True, num_workers=2)\n","\n","## download and load testing dataset\n","testset = torchvision.datasets.MNIST(root='./data', train=False, download=True, transform=transform)\n","testloader = torch.utils.data.DataLoader(testset, batch_size=BATCH_SIZE, shuffle=False, num_workers=2)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"u1jlPrOmIlIJ"},"source":["Our goal here will be to train a model to classify digits based on their pictures. Let's define the model we'll use for this task, which will consist of a convolutional layer followed by two fully-connected layers. Our model is a subclass of `nn.Module`; modules must implement a `forward()` function which defines exactly what operations get applied to the inputted data.\n","\n","Note that `MyModel` makes uses of the predefined modules `Conv2d` and `Linear`, which it instantiates in its constructor. Running data `x` through a module `conv1` simply consists of calling it like a function: `out = conv1(x)`."]},{"cell_type":"markdown","metadata":{"id":"ES2FFH8KqFCO"},"source":["## Define the subclass of MyModel"]},{"cell_type":"code","metadata":{"id":"Y8zge1JmEyAD","cellView":"form"},"source":["#@title Run the defination process\n","class MyModel(nn.Module):\n","    def __init__(self):\n","        super(MyModel, self).__init__()\n","\n","        # 28x28x1 => 26x26x32\n","        self.conv1 = nn.Conv2d(in_channels=1, out_channels=32, kernel_size=3)\n","        self.d1 = nn.Linear(26 * 26 * 32, 128)\n","        self.d2 = nn.Linear(128, 10)\n","\n","    def forward(self, x):\n","        # 32x1x28x28 => 32x32x26x26\n","        x = self.conv1(x)\n","        x = F.relu(x)\n","\n","        # flatten => 32 x (32*26*26)\n","        x = x.flatten(start_dim = 1)\n","        #x = x.view(32, -1)\n","\n","        # 32 x (32*26*26) => 32x128\n","        x = self.d1(x)\n","        x = F.relu(x)\n","\n","        # logits => 32x10\n","        logits = self.d2(x)\n","        out = F.softmax(logits, dim=1)\n","        return out"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3wbgpv4yU0MF"},"source":["We train our model, printing out its training accuracy along the way. We start by instantiating a model instance `model`, a loss function module `criterion` and optimizer `optimizer`, which will adjust the parameters of our model in order to minimize the loss output by `criterion`."]},{"cell_type":"code","metadata":{"id":"JhN99DECU6Hr","cellView":"form"},"source":["#@title Define the criterion, optimizer, model and device \n","learning_rate = 0.001\n","num_epochs = 5\n","\n","device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","model = MyModel()\n","model = model.to(device)\n","criterion = nn.CrossEntropyLoss()\n","optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"c6jDPUQiWEu4"},"source":["Now let's write our training loop. For each minibatch (accessed by enumerating through our data loader `trainloader`), we run our data through `model` in a forward pass, then compute the loss with `criterion`. We call `optimizer.zero_grad()` to zero out the gradients from the previous round of training, followed by `loss.backward()` to backpropagate the new round of gradients and finally `optimizer.step()` to adjust the model parameters based on these gradients."]},{"cell_type":"markdown","metadata":{"id":"_uQCsDt9rYP-"},"source":["## Training process"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uGoOz_zjE2EH","cellView":"form","executionInfo":{"status":"ok","timestamp":1614063455782,"user_tz":-540,"elapsed":54844,"user":{"displayName":"王思雨","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgdKvMq1fEVrSVYMjY_lkMRC-UmX30N77KQ_6cd=s64","userId":"09556943149130240731"}},"outputId":"f1d18a6e-3933-4045-ec33-35d707c67ea2"},"source":["#@title Loop for training \n","for epoch in range(num_epochs):\n","    train_running_loss = 0.0\n","    train_acc = 0.0\n","\n","    ## training step\n","    for i, (images, labels) in enumerate(trainloader):\n","        \n","        images = images.to(device)\n","        labels = labels.to(device)\n","\n","        ## forward + backprop + loss\n","        logits = model(images)\n","        loss = criterion(logits, labels)\n","        optimizer.zero_grad()\n","        loss.backward()\n","\n","        ## update model params\n","        optimizer.step()\n","\n","        train_running_loss += loss.detach().item()\n","        train_acc += (torch.argmax(logits, 1).flatten() == labels).type(torch.float).mean().item()\n","    \n","    print('Epoch: %d | Loss: %.4f | Train Accuracy: %.2f' \\\n","          %(epoch, train_running_loss / i, train_acc/i))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch: 0 | Loss: 1.5684 | Train Accuracy: 0.90\n","Epoch: 1 | Loss: 1.4940 | Train Accuracy: 0.97\n","Epoch: 2 | Loss: 1.4831 | Train Accuracy: 0.98\n","Epoch: 3 | Loss: 1.4780 | Train Accuracy: 0.99\n","Epoch: 4 | Loss: 1.4750 | Train Accuracy: 0.99\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"uvK4hr1OXLWu"},"source":["Lastly, we can run just the forward pass of our model in order to run it on the test set."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"umfoz-KMW7Rs","cellView":"form","executionInfo":{"status":"ok","timestamp":1614063500732,"user_tz":-540,"elapsed":1945,"user":{"displayName":"王思雨","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgdKvMq1fEVrSVYMjY_lkMRC-UmX30N77KQ_6cd=s64","userId":"09556943149130240731"}},"outputId":"deac077d-2f68-43cc-8fb2-7ce5a13647ad"},"source":["#@title Run the forward pass for testing\n","test_acc = 0.0\n","for i, (images, labels) in enumerate(testloader, 0):\n","    images = images.to(device)\n","    labels = labels.to(device)\n","    outputs = model(images)\n","    test_acc += (torch.argmax(outputs, 1).flatten() == labels).type(torch.float).mean().item()\n","    preds = torch.argmax(outputs, 1).flatten().cpu().numpy()\n","        \n","print('Test Accuracy: %.2f'%(test_acc/i))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Test Accuracy: 0.98\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Mp7ha1XLsfCY"},"source":["# Graph Neural Network "]},{"cell_type":"markdown","metadata":{"id":"OJ4OIG8r5EfI"},"source":["## Setup"]},{"cell_type":"code","metadata":{"id":"ENdWKFX0IhMS","cellView":"form"},"source":["#@title Install necessary libraries\r\n","!pip install torch_sparse\r\n","!pip install torch_geometric\r\n","!pip install torch_scatter\r\n","!pip install tensorboardX"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MlFlxfL5dgn2","cellView":"form"},"source":["#@title Import all the libraries\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","\n","import torch_geometric.nn as pyg_nn\n","import torch_geometric.utils as pyg_utils\n","\n","import time\n","from datetime import datetime\n","\n","import networkx as nx\n","import numpy as np\n","import torch\n","import torch.optim as optim\n","\n","from torch_geometric.datasets import TUDataset\n","from torch_geometric.datasets import Planetoid\n","from torch_geometric.data import DataLoader\n","\n","import torch_geometric.transforms as T\n","\n","from tensorboardX import SummaryWriter\n","from sklearn.manifold import TSNE\n","import matplotlib.pyplot as plt\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"aCgqxSiq6I4B"},"source":["## Defining the model"]},{"cell_type":"markdown","metadata":{"id":"2Nc20DEc6PO5"},"source":["The `GNNStack` is our general framework for a GNN which can handle different types of convolutional layers, and both node and graph classification. The `build_conv_model` method determines which type of convolutional layer to use for the given task -- here we choose to use a graph convolutional network for node classification, and a graph isomorphism network for graph classification. Note that PyTorch Geometric provides out-of-the-box modules for these layers, which we use here. The model consists of 3 layers of convolution, followed by mean pooling in the case of graph classification, followed by two fully-connected layers. Since our goal here is classification, we use a negative log-likelihood loss function."]},{"cell_type":"code","metadata":{"id":"ymy1pgN5oNQG","cellView":"form"},"source":["#@title Defining the GNNStack\n","class GNNStack(nn.Module):\n","    def __init__(self, input_dim, hidden_dim, output_dim, task='node'):\n","        super(GNNStack, self).__init__()\n","        self.task = task\n","        self.convs = nn.ModuleList()\n","        self.convs.append(self.build_conv_model(input_dim, hidden_dim))\n","        self.lns = nn.ModuleList()\n","        self.lns.append(nn.LayerNorm(hidden_dim))\n","        self.lns.append(nn.LayerNorm(hidden_dim))\n","        for l in range(2):\n","            self.convs.append(self.build_conv_model(hidden_dim, hidden_dim))\n","\n","        # post-message-passing\n","        self.post_mp = nn.Sequential(\n","            nn.Linear(hidden_dim, hidden_dim), nn.Dropout(0.25), \n","            nn.Linear(hidden_dim, output_dim))\n","        if not (self.task == 'node' or self.task == 'graph'):\n","            raise RuntimeError('Unknown task.')\n","\n","        self.dropout = 0.25\n","        self.num_layers = 3\n","\n","    def build_conv_model(self, input_dim, hidden_dim):\n","        # refer to pytorch geometric nn module for different implementation of GNNs.\n","        if self.task == 'node':\n","            return pyg_nn.GCNConv(input_dim, hidden_dim)\n","        else:\n","            return pyg_nn.GINConv(nn.Sequential(nn.Linear(input_dim, hidden_dim),\n","                                  nn.ReLU(), nn.Linear(hidden_dim, hidden_dim)))\n","\n","    def forward(self, data):\n","        x, edge_index, batch = data.x, data.edge_index, data.batch\n","        if data.num_node_features == 0:\n","          x = torch.ones(data.num_nodes, 1)\n","\n","        for i in range(self.num_layers):\n","            x = self.convs[i](x, edge_index)\n","            emb = x\n","            x = F.relu(x)\n","            x = F.dropout(x, p=self.dropout, training=self.training)\n","            if not i == self.num_layers - 1:\n","                x = self.lns[i](x)\n","\n","        if self.task == 'graph':\n","            x = pyg_nn.global_mean_pool(x, batch)\n","\n","        x = self.post_mp(x)\n","\n","        return emb, F.log_softmax(x, dim=1)\n","\n","    def loss(self, pred, label):\n","        return F.nll_loss(pred, label)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8l8hy4NSvu7J"},"source":["Here pyg_nn.GCNConv and pyg_nn.GINConv are instances of MessagePassing. They define a single layer of graph convolution, which can be decomposed into:\n","* Message computation\n","* Aggregation\n","* Update\n","* Pooling\n","\n","Here we give an example of how to subclass the pytorch geometric MessagePassing class to derive a new model (rather than using existing GCNConv and GINConv).\n","\n","We make use of `MessagePassing`'s key building blocks:\n","- `aggr='add'`: The aggregation method to use (\"add\", \"mean\" or \"max\").\n","- `propagate()`: The initial call to start propagating messages. Takes in the edge indices and any other data to pass along (e.g. to update node embeddings).\n","- `message()`: Constructs messages to node i. Takes any argument which was initially passed to propagate().\n","- `update()`: Updates node embeddings. Takes in the output of aggregation as first argument and any argument which was initially passed to propagate().\n"]},{"cell_type":"code","metadata":{"id":"V_0yhAPgvttr","cellView":"form"},"source":["#@title New model with the pytorch geometric messagepassing\n","class CustomConv(pyg_nn.MessagePassing):\n","    def __init__(self, in_channels, out_channels):\n","        super(CustomConv, self).__init__(aggr='add')  # \"Add\" aggregation.\n","        self.lin = nn.Linear(in_channels, out_channels)\n","        self.lin_self = nn.Linear(in_channels, out_channels)\n","\n","    def forward(self, x, edge_index):\n","        # x has shape [N, in_channels]\n","        # edge_index has shape [2, E]\n","\n","        # Add self-loops to the adjacency matrix.\n","        edge_index, _ = pyg_utils.remove_self_loops(edge_index)\n","\n","        # Transform node feature matrix.\n","        self_x = self.lin_self(x)\n","        #x = self.lin(x)\n","\n","        return self_x + self.propagate(edge_index, size=(x.size(0), x.size(0)), x=self.lin(x))\n","\n","    def message(self, x_i, x_j, edge_index, size):\n","        # Compute messages\n","        # x_j has shape [E, out_channels]\n","\n","        row, col = edge_index\n","        deg = pyg_utils.degree(row, size[0], dtype=x_j.dtype)\n","        deg_inv_sqrt = deg.pow(-0.5)\n","        norm = deg_inv_sqrt[row] * deg_inv_sqrt[col]\n","\n","        return x_j\n","\n","    def update(self, aggr_out):\n","        # aggr_out has shape [N, out_channels]\n","        return aggr_out"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"bANNrQoh8xjF"},"source":["## Training setup"]},{"cell_type":"markdown","metadata":{"id":"yBwQxvFY83TG"},"source":["We train the model in a standard way here, running it forwards to compute its predicted label distribution and backpropagating the error. Note the task setup in our graph setting: for node classification, we define a subset of nodes to be training nodes and the rest of the nodes to be test nodes, and mask out the test nodes during training via `batch.train_mask`. For graph classification, we use 80% of the graphs for training and the remainder for testing, as in other classification settings."]},{"cell_type":"code","metadata":{"id":"u5nqB3HHoHc7","executionInfo":{"status":"ok","timestamp":1615801056580,"user_tz":-540,"elapsed":755,"user":{"displayName":"王思雨","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgdKvMq1fEVrSVYMjY_lkMRC-UmX30N77KQ_6cd=s64","userId":"09556943149130240731"}}},"source":["#@title Train function\n","def train(dataset, task, writer):\n","    if task == 'graph':\n","        data_size = len(dataset)\n","        loader = DataLoader(dataset[:int(data_size * 0.8)], batch_size=64, shuffle=True)\n","        test_loader = DataLoader(dataset[int(data_size * 0.8):], batch_size=64, shuffle=True)\n","    else:\n","        test_loader = loader = DataLoader(dataset, batch_size=64, shuffle=True)\n","\n","    # build model\n","    model = GNNStack(max(dataset.num_node_features, 1), 32, dataset.num_classes, task=task)\n","    opt = optim.Adam(model.parameters(), lr=0.01)\n","    \n","    # train\n","    for epoch in range(200):\n","        total_loss = 0\n","        model.train()\n","        for batch in loader:\n","            #print(batch.train_mask, '----')\n","            opt.zero_grad()\n","            embedding, pred = model(batch)\n","            label = batch.y\n","            if task == 'node':\n","                pred = pred[batch.train_mask]\n","                label = label[batch.train_mask]\n","            loss = model.loss(pred, label)\n","            loss.backward()\n","            opt.step()\n","            total_loss += loss.item() * batch.num_graphs\n","        total_loss /= len(loader.dataset)\n","        writer.add_scalar(\"loss\", total_loss, epoch)\n","\n","        if epoch % 10 == 0:\n","            test_acc = test(test_loader, model)\n","            print(\"Epoch {}. Loss: {:.4f}. Test accuracy: {:.4f}\".format(\n","                epoch, total_loss, test_acc))\n","            writer.add_scalar(\"test accuracy\", test_acc, epoch)\n","\n","    return model\n"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rC8IPZSOXraQ"},"source":["Test time, for the CiteSeer/Cora node classification task, there is only 1 graph. So we use masking to determine validation and test set.\n","\n","For graph classification tasks, a subset of graphs is considered validation / test graph."]},{"cell_type":"code","metadata":{"id":"KvUBHtZaXo2h","cellView":"form","executionInfo":{"status":"ok","timestamp":1615801056855,"user_tz":-540,"elapsed":1027,"user":{"displayName":"王思雨","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgdKvMq1fEVrSVYMjY_lkMRC-UmX30N77KQ_6cd=s64","userId":"09556943149130240731"}}},"source":["#@title Test function\n","def test(loader, model, is_validation=False):\n","    model.eval()\n","\n","    correct = 0\n","    for data in loader:\n","        with torch.no_grad():\n","            emb, pred = model(data)\n","            pred = pred.argmax(dim=1)\n","            label = data.y\n","\n","        if model.task == 'node':\n","            mask = data.val_mask if is_validation else data.test_mask\n","            # node classification: only evaluate on nodes in test set\n","            pred = pred[mask]\n","            label = data.y[mask]\n","            \n","        correct += pred.eq(label).sum().item()\n","    \n","    if model.task == 'graph':\n","        total = len(loader.dataset) \n","    else:\n","        total = 0\n","        for data in loader.dataset:\n","            total += torch.sum(data.test_mask).item()\n","    return correct / total"],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YUo2Ve8c9wGp"},"source":["## Training the model"]},{"cell_type":"code","metadata":{"id":"wf4-g8wT-qsj","cellView":"form"},"source":["#@title Training the dataset of ENZYMES\n","path = \"./log/\" + datetime.now().strftime(\"%Y%m%d-%H%M%S\")\n","writer = SummaryWriter(path)\n","\n","dataset = TUDataset(root='/tmp/ENZYMES', name='ENZYMES')\n","dataset = dataset.shuffle()\n","task = 'graph' #@param [\"node\", \"graph\"]\n","\n","model = train(dataset, task, writer)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zMeWZW8-_Eg8"},"source":["Here we try a node classification task on the Citeseer citation network:"]},{"cell_type":"code","metadata":{"id":"2pREw2UQuBH4","cellView":"form"},"source":["#@title Training the dataset of CORA\n","writer = SummaryWriter(\"./log/\" + datetime.now().strftime(\"%Y%m%d-%H%M%S\"))\n","\n","dataset = Planetoid(root='/tmp/cora', name='cora')\n","task = \"node\" #@param [\"node\", \"graph\"] {allow-input: true}\n","\n","model = train(dataset, task, writer)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"cellView":"form","id":"-8sUXyhaIDKo"},"source":["#@title visualization\r\n","file_name = '20210223-090450' #@param {type:\"string\"}\r\n","%reload_ext tensorboard\r\n","%tensorboard --logdir './log/%s'%(file_name)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"b5xf-UrHD7rp"},"source":["## Visualizing node embeddings"]},{"cell_type":"markdown","metadata":{"id":"2cESIeZB_Nqf"},"source":["One great quality about graph neural networks is that, like other deep methods, their hidden layers provide low-dimensional representations of our data. In the case of node classification, we get a low-dimensional representation for each node in our graph. Let's visualize the output of the last convolutional layer in our node classification GNN via TSNE, a method for plotting high-dimensional data. Nodes are colored according to their labels. We see that nodes with similar labels tend to be near each other in the embedding space, a good indication that our model has learned a useful representation."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"i31kOOTKuLd7","executionInfo":{"status":"ok","timestamp":1614072214505,"user_tz":-540,"elapsed":19217,"user":{"displayName":"王思雨","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgdKvMq1fEVrSVYMjY_lkMRC-UmX30N77KQ_6cd=s64","userId":"09556943149130240731"}},"outputId":"8a137791-f4ff-4cab-e2b5-0c5681916cc0"},"source":["color_list = [\"red\", \"orange\", \"green\", \"blue\", \"purple\", \"brown\", 'yellow']\n","\n","loader = DataLoader(dataset, batch_size=64, shuffle=True)\n","embs = []\n","colors = []\n","for batch in loader:\n","    emb, pred = model(batch)\n","    embs.append(emb)\n","    colors += [color_list[y] for y in batch.y]\n","embs = torch.cat(embs, dim=0)\n","\n","xs, ys = zip(*TSNE().fit_transform(embs.detach().numpy()))\n","plt.scatter(xs, ys, color=colors)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.collections.PathCollection at 0x7f4494d656d8>"]},"metadata":{"tags":[]},"execution_count":66},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"uU6STM21EJT3"},"source":["### Learning unsupervised embeddings with graph autoencoders"]},{"cell_type":"markdown","metadata":{"id":"bLvR2pQSAk4H"},"source":["Finally, GNNs fit nicely in the framework of other neural approaches, and can be used as part of autoencoder techniques, pretraining and multitask learning methods, etc. Here we explore the idea of neural network representations further by building a graph autoencoder which learns these representations in a completely unsupervised way. In contrast to the previous example, we do not make use of the given node labels when training this representation. Instead, we encode the nodes in our network in a low-dimensional space in such a way that the embeddings can be decoded into a reconstruction of the original network. We use graph convolutional layers in the encoder.\n","\n","You can again use TensorBoardX here to visualize the training progress."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":525},"id":"phCgm5idq6TH","executionInfo":{"status":"error","timestamp":1614072224061,"user_tz":-540,"elapsed":3945,"user":{"displayName":"王思雨","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgdKvMq1fEVrSVYMjY_lkMRC-UmX30N77KQ_6cd=s64","userId":"09556943149130240731"}},"outputId":"7a4dca49-f713-4e1f-feb5-bf2822a70dba"},"source":["class Encoder(torch.nn.Module):\n","    def __init__(self, in_channels, out_channels):\n","        super(Encoder, self).__init__()\n","        self.conv1 = pyg_nn.GCNConv(in_channels, 2 * out_channels, cached=True)\n","        self.conv2 = pyg_nn.GCNConv(2 * out_channels, out_channels, cached=True)\n","\n","    def forward(self, x, edge_index):\n","        x = F.relu(self.conv1(x, edge_index))\n","        return self.conv2(x, edge_index)\n","\n","def train(epoch):\n","    model.train()\n","    optimizer.zero_grad()\n","    z = model.encode(x, train_pos_edge_index)\n","    loss = model.recon_loss(z, train_pos_edge_index)\n","    loss.backward()\n","    optimizer.step()\n","    \n","    writer.add_scalar(\"loss\", loss.item(), epoch)\n","\n","def test(pos_edge_index, neg_edge_index):\n","    model.eval()\n","    with torch.no_grad():\n","        z = model.encode(x, train_pos_edge_index)\n","    return model.test(z, pos_edge_index, neg_edge_index)\n","\n","writer = SummaryWriter(\"./log/\" + datetime.now().strftime(\"%Y%m%d-%H%M%S\"))\n","\n","dataset = Planetoid(\"/tmp/citeseer\", \"Citeseer\", T.NormalizeFeatures())\n","data = dataset[0]\n","\n","channels = 16\n","dev = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","print('CUDA availability:', torch.cuda.is_available())\n","\n","# encoder: written by us; decoder: default (inner product)\n","model = pyg_nn.GAE(Encoder(dataset.num_features, channels)).to(dev)\n","labels = data.y\n","data.train_mask = data.val_mask = data.test_mask = data.y = None\n","data = model.split_edges(data)\n","x, train_pos_edge_index = data.x.to(dev), data.train_pos_edge_index.to(dev)\n","optimizer = torch.optim.Adam(model.parameters(), lr=0.01)\n","\n","for epoch in range(1, 201):\n","    train(epoch)\n","    auc, ap = test(data.test_pos_edge_index, data.test_neg_edge_index)\n","    writer.add_scalar(\"AUC\", auc, epoch)\n","    writer.add_scalar(\"AP\", ap, epoch)\n","    if epoch % 10 == 0:\n","        print('Epoch: {:03d}, AUC: {:.4f}, AP: {:.4f}'.format(epoch, auc, ap))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Downloading https://github.com/kimiyoung/planetoid/raw/master/data/ind.citeseer.x\n","Downloading https://github.com/kimiyoung/planetoid/raw/master/data/ind.citeseer.tx\n","Downloading https://github.com/kimiyoung/planetoid/raw/master/data/ind.citeseer.allx\n","Downloading https://github.com/kimiyoung/planetoid/raw/master/data/ind.citeseer.y\n","Downloading https://github.com/kimiyoung/planetoid/raw/master/data/ind.citeseer.ty\n","Downloading https://github.com/kimiyoung/planetoid/raw/master/data/ind.citeseer.ally\n","Downloading https://github.com/kimiyoung/planetoid/raw/master/data/ind.citeseer.graph\n","Downloading https://github.com/kimiyoung/planetoid/raw/master/data/ind.citeseer.test.index\n","Processing...\n","Done!\n"],"name":"stdout"},{"output_type":"error","ename":"AssertionError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAssertionError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-67-2ec075f80ee3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     27\u001b[0m \u001b[0mwriter\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSummaryWriter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"./log/\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mdatetime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstrftime\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"%Y%m%d-%H%M%S\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 29\u001b[0;31m \u001b[0mdataset\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mPlanetoid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"/tmp/citeseer\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"Citeseer\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mT\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mNormalizeFeatures\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     30\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/torch_geometric/datasets/planetoid.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, root, name, split, num_train_per_class, num_val, num_test, transform, pre_transform)\u001b[0m\n\u001b[1;32m     57\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     58\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msplit\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 59\u001b[0;31m         \u001b[0;32massert\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'public'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'full'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'random'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     60\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     61\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0msplit\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'full'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAssertionError\u001b[0m: "]}]},{"cell_type":"markdown","metadata":{"id":"XcSCNm-GDTtQ"},"source":["Finally, we plot our embeddings (the output of the encoder) with TSNE. We color each node embedding according to its label -- but note that we did not use any label information when training our encoder. Nodes with the same label are nevetheless close together in the embedding space. The model has learned the community structure without supervision!"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":355},"id":"m-R_EAYAz5kk","executionInfo":{"status":"error","timestamp":1614072244257,"user_tz":-540,"elapsed":640,"user":{"displayName":"王思雨","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgdKvMq1fEVrSVYMjY_lkMRC-UmX30N77KQ_6cd=s64","userId":"09556943149130240731"}},"outputId":"9e764e7a-f6fd-4159-cfaa-17a1f1c670cc"},"source":["model.eval()\n","z = model.encode(x, train_pos_edge_index)\n","colors = [color_list[y] for y in labels]\n","\n","xs, ys = zip(*TSNE().fit_transform(z.cpu().detach().numpy()))\n","plt.scatter(xs, ys, color=colors)\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"error","ename":"ModuleAttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleAttributeError\u001b[0m                      Traceback (most recent call last)","\u001b[0;32m<ipython-input-68-474095dba5a4>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meval\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mz\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencode\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_pos_edge_index\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mcolors\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mcolor_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0my\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mxs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mTSNE\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mz\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcpu\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdetach\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnumpy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m    777\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mmodules\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    778\u001b[0m         raise ModuleAttributeError(\"'{}' object has no attribute '{}'\".format(\n\u001b[0;32m--> 779\u001b[0;31m             type(self).__name__, name))\n\u001b[0m\u001b[1;32m    780\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    781\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mUnion\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mTensor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Module'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleAttributeError\u001b[0m: 'GNNStack' object has no attribute 'encode'"]}]}]}